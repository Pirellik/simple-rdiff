package librsync

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNewSignature(t *testing.T) {
	giveBuffer := bytes.NewBuffer([]byte{104, 101, 108, 108, 111, 32, 104, 101, 108, 108, 111, 32, 104, 101, 108, 108, 111, 32, 104,
		101, 108, 108, 111, 32, 104, 101, 108, 108, 111, 32, 104, 101, 108, 108, 111, 32, 104, 101, 108, 108, 111, 32, 104, 101, 108,
		108, 111, 32, 104, 101, 108, 108, 111, 32, 104, 101, 108, 108, 111, 32, 104, 101, 108, 108, 111, 32})
	giveBlockLength := 32
	wantSig := &Signature{
		blockLength: 32,
		strongSignatures: [][]byte{
			{61, 7, 188, 146, 183, 66, 102, 5, 216, 249, 196, 2, 184, 114, 200, 118, 207, 233, 146, 244, 196, 82, 188, 82, 74, 178, 66, 250, 206, 163, 215, 240},
			{1, 84, 112, 6, 249, 182, 164, 120, 200, 26, 252, 211, 98, 67, 127, 254, 81, 223, 36, 86, 194, 26, 205, 54, 85, 246, 96, 23, 101, 215, 125, 41},
			{134, 176, 225, 187, 226, 118, 88, 57, 49, 158, 133, 226, 87, 193, 5, 129, 20, 56, 212, 158, 60, 234, 21, 240, 68, 11, 190, 154, 195, 62, 165, 28},
		},
		weakSignaturesToBlockID: map[uint32]uint64{
			16646287:   2,
			3276082140: 1,
			3308522449: 0,
		},
	}

	gotSig, err := NewSignature(giveBuffer, uint32(giveBlockLength))
	assert.NoError(t, err)
	assert.Equal(t, wantSig, gotSig)
}

func TestReadSignature(t *testing.T) {
	giveBuff := bytes.NewBuffer([]byte{0, 0, 0, 32, 197, 52, 11, 209, 61, 7, 188, 146, 183, 66, 102, 5, 216, 249, 196, 2,
		184, 114, 200, 118, 207, 233, 146, 244, 196, 82, 188, 82, 74, 178, 66, 250, 206, 163, 215, 240, 195, 69, 11, 220,
		1, 84, 112, 6, 249, 182, 164, 120, 200, 26, 252, 211, 98, 67, 127, 254, 81, 223, 36, 86, 194, 26, 205, 54, 85,
		246, 96, 23, 101, 215, 125, 41, 0, 254, 0, 143, 134, 176, 225, 187, 226, 118, 88, 57, 49, 158, 133, 226, 87,
		193, 5, 129, 20, 56, 212, 158, 60, 234, 21, 240, 68, 11, 190, 154, 195, 62, 165, 28})
	wantSig := &Signature{
		blockLength: 32,
		strongSignatures: [][]byte{
			{61, 7, 188, 146, 183, 66, 102, 5, 216, 249, 196, 2, 184, 114, 200, 118, 207, 233, 146, 244, 196, 82, 188, 82, 74, 178, 66, 250, 206, 163, 215, 240},
			{1, 84, 112, 6, 249, 182, 164, 120, 200, 26, 252, 211, 98, 67, 127, 254, 81, 223, 36, 86, 194, 26, 205, 54, 85, 246, 96, 23, 101, 215, 125, 41},
			{134, 176, 225, 187, 226, 118, 88, 57, 49, 158, 133, 226, 87, 193, 5, 129, 20, 56, 212, 158, 60, 234, 21, 240, 68, 11, 190, 154, 195, 62, 165, 28},
		},
		weakSignaturesToBlockID: map[uint32]uint64{
			16646287:   2,
			3276082140: 1,
			3308522449: 0,
		},
	}

	gotSig, err := ReadSignature(giveBuff)
	assert.NoError(t, err)
	assert.Equal(t, wantSig, gotSig)
}

func TestSignatureWrite(t *testing.T) {
	giveSig := &Signature{
		blockLength: 32,
		strongSignatures: [][]byte{
			{61, 7, 188, 146, 183, 66, 102, 5, 216, 249, 196, 2, 184, 114, 200, 118, 207, 233, 146, 244, 196, 82, 188, 82, 74, 178, 66, 250, 206, 163, 215, 240},
			{1, 84, 112, 6, 249, 182, 164, 120, 200, 26, 252, 211, 98, 67, 127, 254, 81, 223, 36, 86, 194, 26, 205, 54, 85, 246, 96, 23, 101, 215, 125, 41},
			{134, 176, 225, 187, 226, 118, 88, 57, 49, 158, 133, 226, 87, 193, 5, 129, 20, 56, 212, 158, 60, 234, 21, 240, 68, 11, 190, 154, 195, 62, 165, 28},
		},
		weakSignaturesToBlockID: map[uint32]uint64{
			16646287:   2,
			3276082140: 1,
			3308522449: 0,
		},
	}
	wantBuff := bytes.NewBuffer([]byte{0, 0, 0, 32, 197, 52, 11, 209, 61, 7, 188, 146, 183, 66, 102, 5, 216, 249, 196, 2,
		184, 114, 200, 118, 207, 233, 146, 244, 196, 82, 188, 82, 74, 178, 66, 250, 206, 163, 215, 240, 195, 69, 11, 220,
		1, 84, 112, 6, 249, 182, 164, 120, 200, 26, 252, 211, 98, 67, 127, 254, 81, 223, 36, 86, 194, 26, 205, 54, 85,
		246, 96, 23, 101, 215, 125, 41, 0, 254, 0, 143, 134, 176, 225, 187, 226, 118, 88, 57, 49, 158, 133, 226, 87,
		193, 5, 129, 20, 56, 212, 158, 60, 234, 21, 240, 68, 11, 190, 154, 195, 62, 165, 28})

	gotBuff := &bytes.Buffer{}
	err := giveSig.Write(gotBuff)
	assert.NoError(t, err)
	assert.Equal(t, wantBuff, gotBuff)
}
